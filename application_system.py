# application_system.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import *
from config import GROUP_CHAT_ID, TOPIC_THREAD_ID_APPS
import aiosqlite
import asyncio

logger = logging.getLogger(__name__)

DB_PATH = "tasks.db"

USER_APPLICATION = {}

QUESTIONS = [
    "1. –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?",
    "2. –ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏? –ï—Å–ª–∏ –¥–∞, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞.",
    "3. –°–æ—Å—Ç–æ–∏—Ç–µ –ª–∏ –í—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏/–º–æ–¥–µ—Ä–∞—Ü–∏–∏/–∫–æ–º–∞–Ω–¥–µ –Ω–∞ –∏–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
    "4. –ó–Ω–∞–µ—Ç–µ –ª–∏ –í—ã, –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–∏—Ç—ã?",
    "5. –û–±—â–∏–π –û–ø—ã—Ç/–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —Ç–∏–ø—É –ê–Ω–∫–∞/–ì—Ä–∏—Ñ?",
    "6. –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
    "7. –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –¥–µ–Ω—å (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω–∏)."
]

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    username = update.effective_user.username or f"user{user_id}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–¥–∞–≤–∞–ª –ª–∏ –∑–∞—è–≤–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π?
    app = await get_last_application(user_id)
    if app:
        from datetime import datetime, timedelta
        created_at = datetime.strptime(app[13], "%Y-%m-%d %H:%M:%S")
        if datetime.now() - created_at < timedelta(days=7):
            await query.message.reply_text(
                "‚è≥ –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π. –ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∞—á–∏."
            )
            return

    keyboard = [
        [InlineKeyboardButton("üõ†Ô∏è –•–µ–ª–ø–µ—Ä", callback_data="apply_helper")],
        [InlineKeyboardButton("üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", callback_data="apply_moderator")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_application")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:",
        reply_markup=reply_markup
    )

async def set_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data

    if data == "apply_helper":
        position = "–•–µ–ª–ø–µ—Ä"
    elif data == "apply_moderator":
        position = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    else:
        return

    USER_APPLICATION[user_id] = {
        'step': 0,
        'position': position,
        'answers': []
    }
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {position}\n\n{QUESTIONS[0]}")

async def handle_application_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USER_APPLICATION:
        return

    app_data = USER_APPLICATION[user_id]
    if app_data['step'] >= len(QUESTIONS):
        return

    app_data['answers'].append(update.message.text)
    app_data['step'] += 1

    if app_data['step'] < len(QUESTIONS):
        await update.message.reply_text(QUESTIONS[app_data['step']])
    else:
        text = f"üìÑ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {app_data['position']}\n\n"
        for i, q in enumerate(QUESTIONS):
            text += f"{q}\n–û—Ç–≤–µ—Ç: {app_data['answers'][i]}\n\n"

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_application")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_application")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_application")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
        app_data['step'] = 'preview'

async def confirm_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    app_data = USER_APPLICATION.get(user_id)

    if not app_data or app_data.get('step') != 'preview':
        await query.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    username = update.effective_user.username or f"user{user_id}"
    tz, mod_exp, other_proj, cheat_check, grif_exp, age, time_avail = app_data['answers']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """INSERT INTO applications
            (user_id, username, position, timezone, moderation_experience, other_projects,
             cheat_check_knowledge, grif_experience, age, available_time)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (user_id, f"@{username}", app_data['position'], tz, mod_exp, other_proj, cheat_check, grif_exp, age, time_avail)
        )
        await db.commit()
        async with db.execute("SELECT last_insert_rowid()") as cursor:
            row = await cursor.fetchone()
            app_id = row[0]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –û–¢–î–ï–õ–¨–ù–£–Æ —Ç–µ–º—É –¥–ª—è –∑–∞—è–≤–æ–∫
    text = f"üìÑ –ó–∞—è–≤–∫–∞ #{app_id} –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {app_data['position']}\n–û—Ç: @{username}\n\n"
    for i, q in enumerate(QUESTIONS):
        text += f"{q}\n–û—Ç–≤–µ—Ç: {app_data['answers'][i]}\n\n"

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"app_approve_{app_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        sent_message = await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            message_thread_id=TOPIC_THREAD_ID_APPS,  # ‚Üê –û—Ç–¥–µ–ª—å–Ω–∞—è —Ç–µ–º–∞!
            text=text,
            reply_markup=reply_markup
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "UPDATE applications SET message_id_in_group = ? WHERE id = ?",
                (sent_message.message_id, app_id)
            )
            await db.commit()
        await query.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    del USER_APPLICATION[user_id]

async def edit_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id in USER_APPLICATION:
        USER_APPLICATION[user_id] = {
            'step': 0,
            'position': USER_APPLICATION[user_id]['position'],
            'answers': []
        }
        await query.message.reply_text(QUESTIONS[0])

async def cancel_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id in USER_APPLICATION:
        del USER_APPLICATION[user_id]
        await query.message.reply_text("üö´ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await query.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.")

async def handle_application_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not await is_admin(user_id):
        await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return

    data = query.data
    app_id = None
    status = ""
    message = ""

    if data.startswith("app_approve_"):
        app_id = int(data.split("_")[2])
        status = "approved"
        message = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä."
    elif data.startswith("app_reject_"):
        app_id = int(data.split("_")[2])
        status = "rejected"
        message = "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    else:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT * FROM applications WHERE id = ?", (app_id,)) as cursor:
            app = await cursor.fetchone()
    if not app:
        await query.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE applications SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
            (status, app_id)
        )
        await db.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    author_id = app[1]
    try:
        await context.bot.send_message(chat_id=author_id, text=message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏ {author_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    message_id_in_group = app[12]
    if message_id_in_group:
        try:
            new_text = query.message.text + f"\n\nüìå –°—Ç–∞—Ç—É—Å: {'–û–î–û–ë–†–ï–ù–û' if status == 'approved' else '–û–¢–ö–õ–û–ù–ï–ù–û'}"
            await context.bot.edit_message_text(
                chat_id=GROUP_CHAT_ID,
                message_id=message_id_in_group,
                text=new_text,
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–µ: {e}")

    await query.message.edit_text(
        text=query.message.text + f"\n\nüìå –°—Ç–∞—Ç—É—Å: {'–û–î–û–ë–†–ï–ù–û' if status == 'approved' else '–û–¢–ö–õ–û–ù–ï–ù–û'}",
        reply_markup=None
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞
async def get_last_application(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT * FROM applications WHERE user_id = ? ORDER BY created_at DESC LIMIT 1",
            (user_id,)
        ) as cursor:
            return await cursor.fetchone()