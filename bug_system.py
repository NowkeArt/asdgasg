# bug_system.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import *
from config import GROUP_CHAT_ID, TOPIC_THREAD_ID_BUGS  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

logger = logging.getLogger(__name__)

USER_BUG_DATA = {}

async def create_bug_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    USER_BUG_DATA[user_id] = {'step': 'awaiting_description'}
    await query.message.reply_text("üêû –û–ø–∏—à–∏—Ç–µ –±–∞–≥ (—á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –∫–∞–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏):")

async def handle_bug_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if USER_BUG_DATA.get(user_id, {}).get('step') == 'awaiting_description':
        USER_BUG_DATA[user_id]['description'] = update.message.text
        USER_BUG_DATA[user_id]['step'] = 'awaiting_media'
        await update.message.reply_text("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/–≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ /skip_bug")

async def skip_bug_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_bug_media_or_skip(update, context)

async def handle_bug_media_or_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if USER_BUG_DATA.get(user_id, {}).get('step') == 'awaiting_media':
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            USER_BUG_DATA[user_id]['media_file_id'] = file_id
        elif update.message.video:
            file_id = update.message.video.file_id
            USER_BUG_DATA[user_id]['media_file_id'] = file_id
        else:
            USER_BUG_DATA[user_id]['media_file_id'] = None

        desc = USER_BUG_DATA[user_id]['description']
        media = USER_BUG_DATA[user_id].get('media_file_id')

        text = f"üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–≥–∞:\n\n{desc}"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_bug")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_bug")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bug")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if media:
            if update.message.photo:
                await update.message.reply_photo(photo=media, caption=text, reply_markup=reply_markup)
            elif update.message.video:
                await update.message.reply_video(video=media, caption=text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

        USER_BUG_DATA[user_id]['step'] = 'preview'

async def cancel_bug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id in USER_BUG_DATA:
        del USER_BUG_DATA[user_id]
        await query.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await query.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")

async def confirm_bug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = USER_BUG_DATA.get(user_id)

    if not data or data.get('step') != 'preview':
        await query.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return

    author_username = update.effective_user.username or "user"
    try:
        bug_id = await create_bug(
            author_id=user_id,
            author_username=f"@{author_username}",
            description=data['description'],
            media_file_id=data.get('media_file_id')
        )
        logger.info(f"‚úÖ –ë–∞–≥ #{bug_id} —Å–æ–∑–¥–∞–Ω –≤ –ë–î.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–≥–∞ –≤ –ë–î: {e}")
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = f"üêû –ë–∞–≥ #{bug_id} –æ—Ç @{author_username}:\n\n{data['description']}\n\n–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"

    keyboard = [
        [
            InlineKeyboardButton("üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"bug_complete_{bug_id}"),
            InlineKeyboardButton("üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", callback_data=f"bug_progress_{bug_id}"),
            InlineKeyboardButton("üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"bug_reject_{bug_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if data.get('media_file_id'):
            if update.effective_message.photo:
                sent_message = await context.bot.send_photo(
                    chat_id=GROUP_CHAT_ID,
                    message_thread_id=TOPIC_THREAD_ID_BUGS,  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    photo=data['media_file_id'],
                    caption=text,
                    reply_markup=reply_markup
                )
            elif update.effective_message.video:
                sent_message = await context.bot.send_video(
                    chat_id=GROUP_CHAT_ID,
                    message_thread_id=TOPIC_THREAD_ID_BUGS,  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    video=data['media_file_id'],
                    caption=text,
                    reply_markup=reply_markup
                )
        else:
            sent_message = await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                message_thread_id=TOPIC_THREAD_ID_BUGS,  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                text=text,
                reply_markup=reply_markup
            )

        await update_bug_status(bug_id, "pending", 0, "system", sent_message.message_id)
        logger.info(f"‚úÖ –ë–∞–≥ #{bug_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É (message_id={sent_message.message_id}).")
        await query.message.reply_text("‚úÖ –ë–∞–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–≥–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –≥—Ä—É–ø–ø—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–º—ã.")

    if user_id in USER_BUG_DATA:
        del USER_BUG_DATA[user_id]

async def edit_bug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    USER_BUG_DATA[user_id] = {'step': 'awaiting_description'}
    await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞:")

async def handle_bug_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not await is_admin(user_id):
        await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–≥–æ–≤.")
        return

    data = query.data
    bug_id = None
    status = ""
    emoji = ""

    if data.startswith("bug_complete_"):
        bug_id = int(data.split("_")[2])
        status = "completed"
        emoji = "‚úÖ"
    elif data.startswith("bug_progress_"):
        bug_id = int(data.split("_")[2])
        status = "in_progress"
        emoji = "üõ†Ô∏è"
    elif data.startswith("bug_reject_"):
        bug_id = int(data.split("_")[2])
        status = "rejected"
        emoji = "‚ùå"
    else:
        return

    admin_username = update.effective_user.username or "admin"
    bug = await get_bug_by_id(bug_id)
    if not bug:
        await query.message.reply_text("‚ùå –ë–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    message_id_in_group = bug[7]

    await update_bug_status(bug_id, status, user_id, f"@{admin_username}")

    # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    keyboard = []
    if status == "in_progress":
        keyboard = [
            [
                InlineKeyboardButton("üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"bug_complete_{bug_id}"),
                InlineKeyboardButton("üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"bug_reject_{bug_id}")
            ]
        ]
    elif status in ["completed", "rejected"]:
        keyboard = []
    else:
        keyboard = [
            [
                InlineKeyboardButton("üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"bug_complete_{bug_id}"),
                InlineKeyboardButton("üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", callback_data=f"bug_progress_{bug_id}"),
                InlineKeyboardButton("üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"bug_reject_{bug_id}")
            ]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    if message_id_in_group:
        try:
            new_text = query.message.text.split("\n\n–°—Ç–∞—Ç—É—Å:")[0] + f"\n\n–°—Ç–∞—Ç—É—Å: {emoji} {status}"
            await context.bot.edit_message_text(
                chat_id=GROUP_CHAT_ID,
                message_id=message_id_in_group,
                text=new_text,
                reply_markup=reply_markup
            )
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞–≥–∞ #{bug_id} –≤ –≥—Ä—É–ø–ø–µ.")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞–≥–∞ –≤ –≥—Ä—É–ø–ø–µ: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    author_id = bug[1]
    desc = bug[3]
    try:
        await context.bot.send_message(
            chat_id=author_id,
            text=f"üîî –í–∞—à –±–∞–≥:\n\n{desc}\n\n–∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞: {emoji} {status} (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username})"
        )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –±–∞–≥–∞ {author_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ (–≤ –ª–∏—á–∫–µ)
    await query.message.edit_text(
        text=query.message.text.split("\n\n–°—Ç–∞—Ç—É—Å:")[0] + f"\n\n–°—Ç–∞—Ç—É—Å: {emoji} {status}",
        reply_markup=reply_markup
    )

async def list_bugs_by_status(update: Update, context: ContextTypes.DEFAULT_TYPE, status: str, title: str):
    query = update.callback_query
    user_id = update.effective_user.id

    is_user_admin = await is_admin(user_id)
    author_id = None if is_user_admin else user_id

    bugs = await get_bugs_by_status(status, author_id=author_id)

    if not bugs:
        await query.message.reply_text(f"üì≠ –ù–µ—Ç {title.lower()}.")
        return

    for bug in bugs:
        bug_id, author, desc, media, _, admin, updated, _ = bug
        text = f"üêû ID: {bug_id}\n–ê–≤—Ç–æ—Ä: {author}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n–°—Ç–∞—Ç—É—Å: {title}"

        if admin:
            text += f"\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin}"
        if updated:
            text += f"\n–î–∞—Ç–∞: {updated}"

        await query.message.reply_text(text)

async def list_bugs_active(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await list_bugs_by_status(update, context, "pending", "–ë–∞–≥–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏")

async def list_bugs_in_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await list_bugs_by_status(update, context, "in_progress", "–ë–∞–≥–∏ –≤ —Ä–∞–±–æ—Ç–µ")

async def list_bugs_completed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await list_bugs_by_status(update, context, "completed", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–∞–≥–∏")

async def list_bugs_rejected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await list_bugs_by_status(update, context, "rejected", "–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –±–∞–≥–∏")