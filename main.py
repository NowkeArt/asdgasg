# main.py
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN, SUPER_ADMIN_ID
from database import init_db, add_admin, is_admin

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –º–æ–¥—É–ª–µ–π
from task_system import (
    create_task_start, confirm_task, edit_task, cancel_task,
    list_active, list_completed, list_rejected,
    handle_description, handle_media_or_skip, skip_media,
    handle_admin_action
)
from bug_system import (
    create_bug_start, confirm_bug, edit_bug, cancel_bug,
    handle_bug_description, handle_bug_media_or_skip, skip_bug_media,
    handle_bug_action, list_bugs_active, list_bugs_in_progress,
    list_bugs_completed, list_bugs_rejected
)
from admin_panel import (
    admin_panel, add_admin_start, handle_admin_username,
    list_admins, back_to_main
)
from application_system import (
    start_application, set_position, handle_application_answer,
    confirm_application, edit_application, cancel_application,
    handle_application_action
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
MAIN_MENU_KEYBOARD = [
    [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_task")],
    [InlineKeyboardButton("üêû –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="create_bug")],
    [InlineKeyboardButton("üìã –ú–æ–∏ –±–∞–≥–∏", callback_data="my_bugs_menu")],
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user{user_id}"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if user_id == SUPER_ADMIN_ID:
        await add_admin(user_id, f"@{username}")
        logger.info(f"‚úÖ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω {username} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ /start.")

    is_user_admin = await is_admin(user_id)
    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) ‚Äî –∞–¥–º–∏–Ω: {is_user_admin}")

    keyboard = MAIN_MENU_KEYBOARD.copy()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_user_admin:
        keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–æ–º–∞–Ω–¥—É", callback_data="apply_to_team")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if is_user_admin:
        keyboard.extend([
            [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¢–ó", callback_data="list_active")],
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¢–ó", callback_data="list_completed")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –¢–ó", callback_data="list_rejected")],
            [InlineKeyboardButton("üêõ –ê–¥–º–∏–Ω –±–∞–≥–∏", callback_data="admin_bugs_menu")],
        ])
        
        # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if user_id == SUPER_ADMIN_ID:
            keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        logger.info("‚úÖ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ.")
    else:
        logger.info("‚úÖ –ú–µ–Ω—é –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ.")

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¢–ó –∏ –±–∞–≥–∞–º–∏!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def my_bugs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="list_bugs_active")],
        [InlineKeyboardButton("üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ", callback_data="list_bugs_in_progress")],
        [InlineKeyboardButton("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", callback_data="list_bugs_completed")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="list_bugs_rejected")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("üêû –ú–æ–∏ –±–∞–≥–∏:", reply_markup=reply_markup)

async def admin_bugs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚è≥ –í—Å–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="list_bugs_active")],
        [InlineKeyboardButton("üõ†Ô∏è –í—Å–µ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="list_bugs_in_progress")],
        [InlineKeyboardButton("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", callback_data="list_bugs_completed")],
        [InlineKeyboardButton("‚ùå –í—Å–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="list_bugs_rejected")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("üêõ –í—Å–µ –±–∞–≥–∏ (–∞–¥–º–∏–Ω):", reply_markup=reply_markup)

async def get_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"üîë –í–∞—à Telegram ID: `{user.id}`", parse_mode="Markdown")

async def open_admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != SUPER_ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏.")
        return
    await admin_panel(update, context)

async def cancel_any_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    from task_system import USER_DATA as TASK_USER_DATA
    from bug_system import USER_BUG_DATA
    from application_system import USER_APPLICATION
    from admin_panel import USER_DATA as ADMIN_USER_DATA

    if user_id in TASK_USER_DATA:
        del TASK_USER_DATA[user_id]
        await update.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif user_id in USER_BUG_DATA:
        del USER_BUG_DATA[user_id]
        await update.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif user_id in USER_APPLICATION:
        del USER_APPLICATION[user_id]
        await update.message.reply_text("üö´ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif user_id in ADMIN_USER_DATA:
        del ADMIN_USER_DATA[user_id]
        await update.message.reply_text("üö´ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    handlers_map = {
        "create_task": create_task_start,
        "confirm_task": confirm_task,
        "edit_task": edit_task,
        "cancel_task": cancel_task,
        "list_active": list_active,
        "list_completed": list_completed,
        "list_rejected": list_rejected,
        "create_bug": create_bug_start,
        "confirm_bug": confirm_bug,
        "edit_bug": edit_bug,
        "cancel_bug": cancel_bug,
        "my_bugs_menu": my_bugs_menu,
        "admin_bugs_menu": admin_bugs_menu,
        "list_bugs_active": list_bugs_active,
        "list_bugs_in_progress": list_bugs_in_progress,
        "list_bugs_completed": list_bugs_completed,
        "list_bugs_rejected": list_bugs_rejected,
        "apply_to_team": start_application,
        "apply_helper": set_position,
        "apply_moderator": set_position,
        "confirm_application": confirm_application,
        "edit_application": edit_application,
        "cancel_application": cancel_application,
        "admin_panel": admin_panel,
        "add_admin_start": add_admin_start,
        "list_admins": list_admins,
        "back_to_main": back_to_main,
    }

    if data in handlers_map:
        await handlers_map[data](update, context)
    elif data.startswith("bug_complete_") or data.startswith("bug_progress_") or data.startswith("bug_reject_"):
        await handle_bug_action(update, context)
    elif data.startswith("complete_") or data.startswith("reject_"):
        await handle_admin_action(update, context)
    elif data.startswith("app_approve_") or data.startswith("app_reject_"):
        await handle_application_action(update, context)

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    from task_system import USER_DATA as TASK_USER_DATA
    from bug_system import USER_BUG_DATA
    from application_system import USER_APPLICATION, QUESTIONS
    from admin_panel import USER_DATA as ADMIN_USER_DATA

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
    if user_id in USER_APPLICATION:
        current_step = USER_APPLICATION.get(user_id, {}).get('step')
        if isinstance(current_step, int) and 0 <= current_step < len(QUESTIONS):
            await handle_application_answer(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if user_id in ADMIN_USER_DATA:
        current_step = ADMIN_USER_DATA.get(user_id, {}).get('step')
        if current_step == 'awaiting_admin_username':
            await handle_admin_username(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–ó
    if user_id in TASK_USER_DATA:
        current_step = TASK_USER_DATA.get(user_id, {}).get('step')
        if current_step == 'awaiting_description':
            await handle_description(update, context)
        elif current_step == 'awaiting_media':
            await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–≥–æ–≤
    if user_id in USER_BUG_DATA:
        current_step = USER_BUG_DATA.get(user_id, {}).get('step')
        if current_step == 'awaiting_description':
            await handle_bug_description(update, context)
        elif current_step == 'awaiting_media':
            await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/–≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip_bug")
        return

    await update.message.reply_text("‚ÑπÔ∏è –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

async def handle_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    from task_system import USER_DATA as TASK_USER_DATA
    from bug_system import USER_BUG_DATA

    if user_id in TASK_USER_DATA:
        current_step = TASK_USER_DATA.get(user_id, {}).get('step')
        if current_step == 'awaiting_media':
            await handle_media_or_skip(update, context)
        return

    if user_id in USER_BUG_DATA:
        current_step = USER_BUG_DATA.get(user_id, {}).get('step')
        if current_step == 'awaiting_media':
            await handle_bug_media_or_skip(update, context)
        return

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("skip", skip_media))
    application.add_handler(CommandHandler("skip_bug", skip_bug_media))
    application.add_handler(CommandHandler("cancel", cancel_any_process))
    application.add_handler(CommandHandler("admin", open_admin_panel_command))
    application.add_handler(CommandHandler("id", get_user_id))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        handle_text_input
    ))
    application.add_handler(MessageHandler(
        (filters.PHOTO | filters.VIDEO) & filters.ChatType.PRIVATE,
        handle_media_input
    ))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        await application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":