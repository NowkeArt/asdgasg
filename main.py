# main.py
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN, SUPER_ADMIN_ID, GROUP_CHAT_ID, TOPIC_THREAD_ID_BUGS, TOPIC_THREAD_ID_APPS
from database import *

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è FSM
USER_DATA = {}
USER_BUG_DATA = {}
USER_APPLICATION = {}
ADMIN_USER_DATA = {}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞—è–≤–æ–∫
QUESTIONS = [
    "1. –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?",
    "2. –ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏? –ï—Å–ª–∏ –¥–∞, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞.",
    "3. –°–æ—Å—Ç–æ–∏—Ç–µ –ª–∏ –í—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏/–º–æ–¥–µ—Ä–∞—Ü–∏–∏/–∫–æ–º–∞–Ω–¥–µ –Ω–∞ –∏–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
    "4. –ó–Ω–∞–µ—Ç–µ –ª–∏ –í—ã, –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–∏—Ç—ã?",
    "5. –û–±—â–∏–π –û–ø—ã—Ç/–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —Ç–∏–ø—É –ê–Ω–∫–∞/–ì—Ä–∏—Ñ?",
    "6. –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
    "7. –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –¥–µ–Ω—å (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω–∏)."
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_keyboard(is_admin: bool, is_super_admin: bool):
    keyboard = [
        [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¢–ó", callback_data="create_task")],
        [InlineKeyboardButton("üêû –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="create_bug")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –±–∞–≥–∏", callback_data="my_bugs_menu")],
    ]
    
    if not is_admin:
        keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–æ–º–∞–Ω–¥—É", callback_data="apply_to_team")])
    
    if is_admin:
        keyboard.extend([
            [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¢–ó", callback_data="list_active")],
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¢–ó", callback_data="list_completed")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –¢–ó", callback_data="list_rejected")],
            [InlineKeyboardButton("üêõ –ê–¥–º–∏–Ω –±–∞–≥–∏", callback_data="admin_bugs_menu")],
        ])
        
        if is_super_admin:
            keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    return keyboard

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user{user_id}"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if user_id == SUPER_ADMIN_ID:
        await add_admin(user_id, f"@{username}")
        logger.info(f"‚úÖ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω {username} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ /start.")

    is_user_admin = await is_admin(user_id)
    is_super_admin = user_id == SUPER_ADMIN_ID
    
    keyboard = get_main_menu_keyboard(is_user_admin, is_super_admin)
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¢–ó –∏ –±–∞–≥–∞–º–∏!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# === –°–ò–°–¢–ï–ú–ê –¢–ó ===

async def create_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    USER_DATA[user_id] = {'step': 'awaiting_description'}
    await query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

async def handle_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    USER_DATA[user_id]['description'] = update.message.text
    USER_DATA[user_id]['step'] = 'awaiting_media'
    await update.message.reply_text("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")

async def handle_task_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        USER_DATA[user_id]['media_file_id'] = file_id
    elif update.message.video:
        file_id = update.message.video.file_id
        USER_DATA[user_id]['media_file_id'] = file_id
    else:
        USER_DATA[user_id]['media_file_id'] = None

    await show_task_preview(update, context)

async def skip_task_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in USER_DATA:
        USER_DATA[user_id]['media_file_id'] = None
        await show_task_preview(update, context)

async def show_task_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = USER_DATA[user_id]
    
    desc = data['description']
    media = data.get('media_file_id')

    text = f"üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¢–ó:\n\n{desc}"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_task")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_task")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if media:
        if update.message and update.message.photo:
            await update.message.reply_photo(photo=media, caption=text, reply_markup=reply_markup)
        elif update.message and update.message.video:
            await update.message.reply_video(video=media, caption=text, reply_markup=reply_markup)
        else:
            await context.bot.send_photo(chat_id=user_id, photo=media, caption=text, reply_markup=reply_markup)
    else:
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    USER_DATA[user_id]['step'] = 'preview'

async def confirm_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = USER_DATA.get(user_id)

    if not data or data.get('step') != 'preview':
        await query.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return

    author_username = update.effective_user.username or "user"
    task_id = await create_task(
        author_id=user_id,
        author_username=f"@{author_username}",
        description=data['description'],
        media_file_id=data.get('media_file_id')
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    admins = await get_admins()
    sent_to_anyone = False

    for admin_id, username in admins:
        try:
            text = f"üìÑ –ù–æ–≤–æ–µ –¢–ó #{task_id} –æ—Ç @{author_username}:\n\n{data['description']}"
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{task_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{task_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if data.get('media_file_id'):
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=data['media_file_id'],
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=text,
                    reply_markup=reply_markup
                )
            sent_to_anyone = True
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {username}: {e}")

    if sent_to_anyone:
        await query.message.reply_text("‚úÖ –¢–ó —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¢–ó –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    del USER_DATA[user_id]

async def edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    USER_DATA[user_id] = {'step': 'awaiting_description'}
    await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id in USER_DATA:
        del USER_DATA[user_id]
    await query.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def handle_admin_task_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    if not await is_admin(user_id):
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    data = query.data
    if data.startswith("complete_"):
        task_id = int(data.split("_")[1])
        status = "completed"
        action_text = "‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    elif data.startswith("reject_"):
        task_id = int(data.split("_")[1])
        status = "rejected"
        action_text = "‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    else:
        return

    admin_username = update.effective_user.username or "admin"
    await update_task_status(task_id, status, user_id, f"@{admin_username}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    task = await get_task_by_id(task_id)
    if task:
        author_id = task[1]
        desc = task[3]
        try:
            await context.bot.send_message(
                chat_id=author_id,
                text=f"üîî –í–∞—à–µ –¢–ó:\n\n{desc}\n\n–±—ã–ª–æ {action_text} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ {author_id}: {e}")

    await query.message.edit_text(
        text=query.message.text + f"\n\nüìå –°—Ç–∞—Ç—É—Å: {action_text.upper()}",
        reply_markup=None
    )

# === –°–ò–°–¢–ï–ú–ê –ë–ê–ì–û–í ===

async def create_bug_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    USER_BUG_DATA[user_id] = {'step': 'awaiting_description'}
    await query.message.reply_text("üêû –û–ø–∏—à–∏—Ç–µ –±–∞–≥ (—á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –∫–∞–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏):")

async def handle_bug_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    USER_BUG_DATA[user_id]['description'] = update.message.text
    USER_BUG_DATA[user_id]['step'] = 'awaiting_media'
    await update.message.reply_text("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/–≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip_bug")

async def handle_bug_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        USER_BUG_DATA[user_id]['media_file_id'] = file_id
    elif update.message.video:
        file_id = update.message.video.file_id
        USER_BUG_DATA[user_id]['media_file_id'] = file_id
    else:
        USER_BUG_DATA[user_id]['media_file_id'] = None

    await show_bug_preview(update, context)

async def skip_bug_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in USER_BUG_DATA:
        USER_BUG_DATA[user_id]['media_file_id'] = None
        await show_bug_preview(update, context)

async def show_bug_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = USER_BUG_DATA[user_id]
    
    desc = data['description']
    media = data.get('media_file_id')

    text = f"üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–≥–∞:\n\n{desc}"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_bug")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_bug")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bug")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if media:
        if update.message and update.message.photo:
            await update.message.reply_photo(photo=media, caption=text, reply_markup=reply_markup)
        elif update.message and update.message.video:
            await update.message.reply_video(video=media, caption=text, reply_markup=reply_markup)
        else:
            await context.bot.send_photo(chat_id=user_id, photo=media, caption=text, reply_markup=reply_markup)
    else:
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    USER_BUG_DATA[user_id]['step'] = 'preview'

async def confirm_bug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = USER_BUG_DATA.get(user_id)

    if not data or data.get('step') != 'preview':
        await query.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return

    author_username = update.effective_user.username or "user"
    
    try:
        bug_id = await create_bug(
            author_id=user_id,
            author_username=f"@{author_username}",
            description=data['description'],
            media_file_id=data.get('media_file_id')
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        text = f"üêû –ë–∞–≥ #{bug_id} –æ—Ç @{author_username}:\n\n{data['description']}\n\n–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        
        keyboard = [
            [
                InlineKeyboardButton("üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"bug_complete_{bug_id}"),
                InlineKeyboardButton("üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", callback_data=f"bug_progress_{bug_id}"),
                InlineKeyboardButton("üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"bug_reject_{bug_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if data.get('media_file_id'):
            sent_message = await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                message_thread_id=TOPIC_THREAD_ID_BUGS,
                photo=data['media_file_id'],
                caption=text,
                reply_markup=reply_markup
            )
        else:
            sent_message = await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                message_thread_id=TOPIC_THREAD_ID_BUGS,
                text=text,
                reply_markup=reply_markup
            )

        await update_bug_status(bug_id, "pending", 0, "system", sent_message.message_id)
        await query.message.reply_text("‚úÖ –ë–∞–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–≥–∞: {e}")
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    if user_id in USER_BUG_DATA:
        del USER_BUG_DATA[user_id]

async def edit_bug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    USER_BUG_DATA[user_id] = {'step': 'awaiting_description'}
    await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞:")

async def cancel_bug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id in USER_BUG_DATA:
        del USER_BUG_DATA[user_id]
    await query.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def handle_bug_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not await is_admin(user_id):
        await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–≥–æ–≤.")
        return

    data = query.data
    bug_id = None
    status = ""
    emoji = ""

    if data.startswith("bug_complete_"):
        bug_id = int(data.split("_")[2])
        status = "completed"
        emoji = "‚úÖ"
    elif data.startswith("bug_progress_"):
        bug_id = int(data.split("_")[2])
        status = "in_progress"
        emoji = "üõ†Ô∏è"
    elif data.startswith("bug_reject_"):
        bug_id = int(data.split("_")[2])
        status = "rejected"
        emoji = "‚ùå"
    else:
        return

    admin_username = update.effective_user.username or "admin"
    bug = await get_bug_by_id(bug_id)
    if not bug:
        await query.message.reply_text("‚ùå –ë–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await update_bug_status(bug_id, status, user_id, f"@{admin_username}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    author_id = bug[1]
    desc = bug[3]
    try:
        await context.bot.send_message(
            chat_id=author_id,
            text=f"üîî –í–∞—à –±–∞–≥:\n\n{desc}\n\n–∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞: {emoji} {status} (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username})"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –±–∞–≥–∞ {author_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    message_id_in_group = bug[7]
    if message_id_in_group:
        try:
            new_text = query.message.text.split("\n\n–°—Ç–∞—Ç—É—Å:")[0] + f"\n\n–°—Ç–∞—Ç—É—Å: {emoji} {status}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            if status == "in_progress":
                keyboard = [
                    [
                        InlineKeyboardButton("üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"bug_complete_{bug_id}"),
                        InlineKeyboardButton("üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"bug_reject_{bug_id}")
                    ]
                ]
            elif status not in ["completed", "rejected"]:
                keyboard = [
                    [
                        InlineKeyboardButton("üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"bug_complete_{bug_id}"),
                        InlineKeyboardButton("üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", callback_data=f"bug_progress_{bug_id}"),
                        InlineKeyboardButton("üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"bug_reject_{bug_id}")
                    ]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            await context.bot.edit_message_text(
                chat_id=GROUP_CHAT_ID,
                message_id=message_id_in_group,
                text=new_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞–≥–∞ –≤ –≥—Ä—É–ø–ø–µ: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
    await query.message.edit_text(
        text=query.message.text.split("\n\n–°—Ç–∞—Ç—É—Å:")[0] + f"\n\n–°—Ç–∞—Ç—É—Å: {emoji} {status}",
        reply_markup=None
    )

# === –ú–ï–ù–Æ –ò –°–ü–ò–°–ö–ò ===

async def my_bugs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="list_bugs_pending")],
        [InlineKeyboardButton("üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ", callback_data="list_bugs_progress")],
        [InlineKeyboardButton("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", callback_data="list_bugs_completed")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="list_bugs_rejected")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("üêû –ú–æ–∏ –±–∞–≥–∏:", reply_markup=reply_markup)

async def admin_bugs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚è≥ –í—Å–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="list_bugs_pending_all")],
        [InlineKeyboardButton("üõ†Ô∏è –í—Å–µ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="list_bugs_progress_all")],
        [InlineKeyboardButton("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", callback_data="list_bugs_completed_all")],
        [InlineKeyboardButton("‚ùå –í—Å–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="list_bugs_rejected_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("üêõ –í—Å–µ –±–∞–≥–∏ (–∞–¥–º–∏–Ω):", reply_markup=reply_markup)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    is_user_admin = await is_admin(user_id)
    is_super_admin = user_id == SUPER_ADMIN_ID
    
    keyboard = get_main_menu_keyboard(is_user_admin, is_super_admin)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–ó
    if user_id in USER_DATA:
        step = USER_DATA[user_id].get('step')
        if step == 'awaiting_description':
            await handle_task_description(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–≥–æ–≤
    if user_id in USER_BUG_DATA:
        step = USER_BUG_DATA[user_id].get('step')
        if step == 'awaiting_description':
            await handle_bug_description(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
    if user_id in USER_APPLICATION:
        step = USER_APPLICATION[user_id].get('step')
        if isinstance(step, int) and 0 <= step < len(QUESTIONS):
            await handle_application_answer(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if user_id in ADMIN_USER_DATA:
        step = ADMIN_USER_DATA[user_id].get('step')
        if step == 'awaiting_admin_username':
            await handle_admin_username(update, context)
            return
    
    await update.message.reply_text("‚ÑπÔ∏è –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

async def handle_media_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –¢–ó
    if user_id in USER_DATA:
        step = USER_DATA[user_id].get('step')
        if step == 'awaiting_media':
            await handle_task_media(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –±–∞–≥–æ–≤
    if user_id in USER_BUG_DATA:
        step = USER_BUG_DATA[user_id].get('step')
        if step == 'awaiting_media':
            await handle_bug_media(update, context)
            return
    
    await update.message.reply_text("üì∏ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")

# === –°–ò–°–¢–ï–ú–ê –ó–ê–Ø–í–û–ö ===

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞—è–≤–∫—É
    app = await get_last_application(user_id)
    if app:
        from datetime import datetime, timedelta
        created_at = datetime.strptime(app[13], "%Y-%m-%d %H:%M:%S")
        if datetime.now() - created_at < timedelta(days=7):
            await query.message.reply_text(
                "‚è≥ –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π. –ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∞—á–∏."
            )
            return

    keyboard = [
        [InlineKeyboardButton("üõ†Ô∏è –•–µ–ª–ø–µ—Ä", callback_data="apply_helper")],
        [InlineKeyboardButton("üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", callback_data="apply_moderator")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_application")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:",
        reply_markup=reply_markup
    )

async def set_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data

    if data == "apply_helper":
        position = "–•–µ–ª–ø–µ—Ä"
    elif data == "apply_moderator":
        position = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    else:
        return

    USER_APPLICATION[user_id] = {
        'step': 0,
        'position': position,
        'answers': []
    }
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {position}\n\n{QUESTIONS[0]}")

async def handle_application_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USER_APPLICATION:
        return

    app_data = USER_APPLICATION[user_id]
    if app_data['step'] >= len(QUESTIONS):
        return

    app_data['answers'].append(update.message.text)
    app_data['step'] += 1

    if app_data['step'] < len(QUESTIONS):
        await update.message.reply_text(QUESTIONS[app_data['step']])
    else:
        text = f"üìÑ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {app_data['position']}\n\n"
        for i, q in enumerate(QUESTIONS):
            text += f"{q}\n–û—Ç–≤–µ—Ç: {app_data['answers'][i]}\n\n"

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_application")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_application")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_application")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
        app_data['step'] = 'preview'

async def confirm_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    app_data = USER_APPLICATION.get(user_id)

    if not app_data or app_data.get('step') != 'preview':
        await query.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    username = update.effective_user.username or f"user{user_id}"
    
    try:
        app_id = await create_application(user_id, f"@{username}", app_data['position'], app_data['answers'])
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
        text = f"üìÑ –ó–∞—è–≤–∫–∞ #{app_id} –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {app_data['position']}\n–û—Ç: @{username}\n\n"
        for i, q in enumerate(QUESTIONS):
            text += f"{q}\n–û—Ç–≤–µ—Ç: {app_data['answers'][i]}\n\n"

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"app_approve_{app_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        sent_message = await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            message_thread_id=TOPIC_THREAD_ID_APPS,
            text=text,
            reply_markup=reply_markup
        )
        
        await update_application_message_id(app_id, sent_message.message_id)
        await query.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    if user_id in USER_APPLICATION:
        del USER_APPLICATION[user_id]

async def edit_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id in USER_APPLICATION:
        USER_APPLICATION[user_id] = {
            'step': 0,
            'position': USER_APPLICATION[user_id]['position'],
            'answers': []
        }
        await query.message.reply_text(QUESTIONS[0])

async def cancel_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id in USER_APPLICATION:
        del USER_APPLICATION[user_id]
    await query.message.reply_text("üö´ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def handle_application_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not await is_admin(user_id):
        await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return

    data = query.data
    app_id = None
    status = ""
    message = ""

    if data.startswith("app_approve_"):
        app_id = int(data.split("_")[2])
        status = "approved"
        message = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä."
    elif data.startswith("app_reject_"):
        app_id = int(data.split("_")[2])
        status = "rejected"
        message = "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    else:
        return

    app = await get_application_by_id(app_id)
    if not app:
        await query.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await update_application_status(app_id, status)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    author_id = app[1]
    try:
        await context.bot.send_message(chat_id=author_id, text=message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏ {author_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    await query.message.edit_text(
        text=query.message.text + f"\n\nüìå –°—Ç–∞—Ç—É—Å: {'–û–î–û–ë–†–ï–ù–û' if status == 'approved' else '–û–¢–ö–õ–û–ù–ï–ù–û'}",
        reply_markup=None
    )

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    if user_id != SUPER_ADMIN_ID:
        await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin_start")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="list_admins")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def add_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    if user_id != SUPER_ADMIN_ID:
        return
        
    ADMIN_USER_DATA[user_id] = {'step': 'awaiting_admin_username'}
    await query.message.reply_text("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:")

async def handle_admin_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if ADMIN_USER_DATA.get(user_id, {}).get('step') == 'awaiting_admin_username':
        username = update.message.text.strip()
        if not username.startswith("@"):
            await update.message.reply_text("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
            return

        await add_admin(0, username)
        await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω {username} –¥–æ–±–∞–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É /start).")
        del ADMIN_USER_DATA[user_id]

async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    admins = await get_admins()
    if not admins:
        text = "üì≠ –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n" + "\n".join([f"‚Ä¢ {username} (ID: {uid})" for uid, username in admins])
    await query.message.reply_text(text)

# === –ö–û–ú–ê–ù–î–´ ===

async def get_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"üîë –í–∞—à Telegram ID: `{user.id}`", parse_mode="Markdown")

async def cancel_any_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id in USER_DATA:
        del USER_DATA[user_id]
        await update.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif user_id in USER_BUG_DATA:
        del USER_BUG_DATA[user_id]
        await update.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif user_id in USER_APPLICATION:
        del USER_APPLICATION[user_id]
        await update.message.reply_text("üö´ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif user_id in ADMIN_USER_DATA:
        del ADMIN_USER_DATA[user_id]
        await update.message.reply_text("üö´ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    handlers_map = {
        # –¢–ó
        "create_task": create_task_start,
        "confirm_task": confirm_task,
        "edit_task": edit_task,
        "cancel_task": cancel_task,
        
        # –ë–∞–≥–∏
        "create_bug": create_bug_start,
        "confirm_bug": confirm_bug,
        "edit_bug": edit_bug,
        "cancel_bug": cancel_bug,
        "my_bugs_menu": my_bugs_menu,
        "admin_bugs_menu": admin_bugs_menu,
        
        # –ó–∞—è–≤–∫–∏
        "apply_to_team": start_application,
        "apply_helper": set_position,
        "apply_moderator": set_position,
        "confirm_application": confirm_application,
        "edit_application": edit_application,
        "cancel_application": cancel_application,
        
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        "admin_panel": admin_panel,
        "add_admin_start": add_admin_start,
        "list_admins": list_admins,
        "back_to_main": back_to_main,
    }

    if data in handlers_map:
        await handlers_map[data](update, context)
    elif data.startswith("bug_complete_") or data.startswith("bug_progress_") or data.startswith("bug_reject_"):
        await handle_bug_action(update, context)
    elif data.startswith("complete_") or data.startswith("reject_"):
        await handle_admin_task_action(update, context)
    elif data.startswith("app_approve_") or data.startswith("app_reject_"):
        await handle_application_action(update, context)

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("skip", skip_task_media))
    application.add_handler(CommandHandler("skip_bug", skip_bug_media))
    application.add_handler(CommandHandler("cancel", cancel_any_process))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("id", get_user_id))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        handle_text_message
    ))
    application.add_handler(MessageHandler(
        (filters.PHOTO | filters.VIDEO) & filters.ChatType.PRIVATE,
        handle_media_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())